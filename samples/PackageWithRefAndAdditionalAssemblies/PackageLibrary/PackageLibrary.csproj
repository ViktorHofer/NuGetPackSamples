<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!-- When using TFMs with TargetPlatformMonikers and including reference assemblies, platform versions are required. Bug? -->
    <TargetFrameworks>net9.0-windows7.0;net8.0-windows7.0</TargetFrameworks>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);IncludeProjectReferencesWithPrivateAssetsAttributeInPackage</TargetsForTfmSpecificBuildOutput>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);IncludeReferenceAssemblies</TargetsForTfmSpecificContentInPackage>
    <NoWarn>$(NoWarn);NU5131</NoWarn>
    <BuildProjectReferences Condition="'$(NoBuild)' == 'true'">false</BuildProjectReferences>
    <!-- Removed the .xml from DefaultAllowedOutputExtensionsInPackageBuildOutputFolder -->
    <DefaultAllowedOutputExtensionsInPackageBuildOutputFolder>.dll; .exe; .winmd; .json; .pri</DefaultAllowedOutputExtensionsInPackageBuildOutputFolder>

    <!-- Generate documentation file -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <!-- Generate symbols package -->
    <IncludeSymbols>true</IncludeSymbols>
  </PropertyGroup>

  <!-- Child projects. Use `PrivateAssets=all` to redistribute the assembly into this package. -->
  <ItemGroup>
    <ProjectReference Include="..\ReferencedLibrary\ReferencedLibrary.csproj" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="8.0.1" />

    <!-- List of package dependencies from redistributed child projects that don't transitively flow: -->
    <PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="8.0.1" />
  </ItemGroup>

  <!-- Add ProjectReferences output which are flagged as PrivateAssets="all" into the package. -->
  <Target Name="IncludeProjectReferencesWithPrivateAssetsAttributeInPackage"
          Condition="'@(ProjectReference)' != '' and @(ProjectReference->AnyHaveMetadataValue('PrivateAssets', 'all'))"
          DependsOnTargets="BuildOnlySettings;ResolveReferences">
    <ItemGroup>
      <_projectReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference')->WithMetadataValue('PrivateAssets', 'all'))" />

      <BuildOutputInPackage Include="@(_projectReferenceCopyLocalPaths)"
                            TargetPath="%(_projectReferenceCopyLocalPaths.DestinationSubDirectory)" />
      <TfmSpecificDebugSymbolsFile Include="@(_projectReferenceCopyLocalPaths->WithMetadataValue('Extension', '.pdb'))"
                                   TargetPath="%(_projectReferenceCopyLocalPaths.DestinationSubDirectory)"
                                   TargetFramework="$(TargetFramework)"
                                   Condition="'$(IncludeSymbols)' == 'true'" />

      <!-- Remove symbol from the non symbol package. -->
      <BuildOutputInPackage Remove="@(_projectReferenceCopyLocalPaths->WithMetadataValue('Extension', '.pdb'))" />
      <BuildOutputInPackage Remove="@(_projectReferenceCopyLocalPaths->WithMetadataValue('Extension', '.xml'))" />
    </ItemGroup>
  </Target>

  <!-- Add a ref folder to the package which only exposes the library (and its documentation file) so that the
       referenced class library doesn't get exposed. -->
  <Target Name="IncludeReferenceAssemblies">
    <ItemGroup>
      <TfmSpecificPackageFile Include="$(TargetRefPath)" PackagePath="ref/$(TargetFramework)" />
      <TfmSpecificPackageFile Include="$(DocumentationFile)" PackagePath="ref/$(TargetFramework)" Condition="'$(GenerateDocumentationFile)' == 'true'" />
    </ItemGroup>
  </Target>

</Project>
